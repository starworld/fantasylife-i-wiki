---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  placeholder?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  placeholder = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 300"%3E%3Crect width="400" height="300" fill="%23e5e7eb"/%3E%3C/svg%3E'
} = Astro.props;

// 画像の拡張子を取得
const ext = src.split('.').pop()?.toLowerCase();
const isWebPSupported = ['jpg', 'jpeg', 'png'].includes(ext || '');

// srcsetを生成
const generateSrcSet = (baseSrc: string) => {
  const sizes = [320, 640, 768, 1024, 1280];
  return sizes.map(size => `${baseSrc}?w=${size} ${size}w`).join(', ');
};
---

<picture class={`lazy-image-wrapper ${className}`}>
  {isWebPSupported && (
    <source
      type="image/webp"
      srcset={generateSrcSet(src.replace(/\.(jpg|jpeg|png)$/, '.webp'))}
      sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
    />
  )}
  <img
    src={placeholder}
    data-src={src}
    srcset={generateSrcSet(src)}
    sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={`lazy-image ${className}`}
    decoding="async"
  />
</picture>

<script>
  // Intersection Observer for lazy loading
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const src = img.dataset.src;
          
          if (src) {
            // 実際の画像を読み込む
            img.src = src;
            img.classList.add('loaded');
            
            // srcsetも更新
            const picture = img.closest('picture');
            const sources = picture?.querySelectorAll('source');
            sources?.forEach(source => {
              const srcset = source.getAttribute('srcset');
              if (srcset) {
                source.setAttribute('srcset', srcset);
              }
            });
            
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });

    // すべての遅延読み込み画像を監視
    document.addEventListener('DOMContentLoaded', () => {
      const lazyImages = document.querySelectorAll('img.lazy-image');
      lazyImages.forEach(img => imageObserver.observe(img));
    });
  } else {
    // Intersection Observerがサポートされていない場合は即座に読み込む
    document.addEventListener('DOMContentLoaded', () => {
      const lazyImages = document.querySelectorAll('img.lazy-image');
      lazyImages.forEach(img => {
        const imgElement = img as HTMLImageElement;
        const src = imgElement.dataset.src;
        if (src) {
          imgElement.src = src;
        }
      });
    });
  }
</script>

<style>
  .lazy-image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }

  .lazy-image {
    display: block;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .lazy-image.loaded {
    opacity: 1;
  }

  /* ブラー効果（オプション） */
  .lazy-image:not(.loaded) {
    filter: blur(5px);
    transform: scale(1.05);
  }
</style>